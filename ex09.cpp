#include <iostream>
#include <iomanip>
using namespace std;

class Test{						//클래스명 첫글자는 대문자로 작성하자
public:
	//선언 - 변수만들기
	int c;  //전역변수				<- 멤버변수(멤버필드)

	void plus(){					//<- 멤버함수(멤버메소드)
		//입력 - 변수에 데이터 저장하기

		//연산 - 데이터 가공하기
		c=1+2;   //명령문은 함수 밖에 존재할 수 없다.
	}
	void output(){
		//출력 - 결과값 확인하기
		cout<<c<<endl;
	}
};   //구조체처럼 세미콜론을 꼭 기입하자. 구조체는 함수가 들어갈 수 없다.

class Test2{
public:			//접근지정자. public 안쓴 경우 main에서 객체명을 통해 내부 멤버필드들을 사용할 수가 없다. 기본값이 private인건가?
	int c, d, r;
	void input(){
		cout<<"정수 입력 : ";
		cin>>c;
		cout<<"정수 입력 : ";
		cin>>d;
	}
	void plus(){
		r=c+d;
	}
	void output(){
		cout<<r<<endl;
	}
}

void main(){
	//클래스는 변수와 함수를 일종의 자료형으로 만든 것이다. user자료형이라고도 한다.
	Test t;
	//t라는 클래스변수(객체)와 내부 멤버필드(c)는 stack에 만들어지고 함수는 code영역에 만들어진다.
	//자바였다면 t라는 참조형변수만 stack에 만들어지고 나머지는 모두 heap에 만들어질 것

	/* 클래스변수(객체) 이름(명)의 기능
	1. 멤버변수를 대표하는 이름
	2. 멤버함수 호출권한을 가짐
	*/

	t.plus();
	t.output();
	//자바였다면 참조형변수를 만들고 new연산자를 통해 heap영역에 실질적인 객체공간을 만들어야 했을텐데 C++은 클래스변수를 만들면 객체쪽도 바로 만들어지나봄
	//t라는 클래스변수 안에 c가 만들어지고(stack부분에) 함수들은 code부분에..

	//C++도 new를 통해서 동적메모리에 만들수도 있을까
	//또는 이렇게 만든 객체를 포인터변수로 가리키게 만들어서 마치 자바처럼 만들수도 있을 듯

	Test2 t2;
	t2.input();
	t2.plus();
	t2.output();
	//자바에서는 기본적으로 참조형변수(stack)-실질적공간(heap) 의 형태로서 객체를 만들지만, C++에서는 객체를 그냥 만드는 경우 stack영역과 code부분에 만들어진다.
	Test2* pt = new Test2;
	//이렇게 내가 직접 참조형변수-실질적공간 형태로 만드는 것 되는군.
	pt->input();
	pt->plus();
	pt->output();
	//사용은 이렇게 간접참조연산자 -> 를 써야하네. 자바에서는 . 을 이용하면 됐는데..

	delete pt; //제거는 이렇게?

	/*
	자바에서는 자동으로 참조형변수(stack)-실질적공간(heap) 형태로 객체를 생성한다. (자동 동적할당 생성)
	이는 배열에서도 마찬가지이고 일반변수가 아닌이상 모든 변수, 객체에 통용되는 규칙이다.

	C++에서는 개발자가 지정하지 않는 한 자바와같은 형태로 만들어지지 않는다.
	즉, 기본적으로는 그냥 변수명이 곧 실질적 공간명인 형태이다.
	배열 또한 마찬가지이며 객체도 그러하다.
	자바와 같이 참조형변수-실질적공간 형태로 만들고 싶다면 포인터를 사용하도록 하자! (동적할당을 써야 한다면 new도!)
	

	자바에서는 객체의 멤버들에 접근할 때 . 멤버참조연산자 하나면 다 가능했지만
	C++에서는 일반객체로 만든 경우 .을 쓰고 포인터를 이용해서 T만든 경우 -> 를 쓴다.

	이외에도 접근연산자로는 * 역참조연산자, [] 인덱스 가 존재한다.

	*/
	
	Test2 tt;
	Test2* ptt = &tt;
	ptt->input();
	ptt->plus();
	ptt->output();
	//역시나 이렇게도 되는군.

	//배열이든 객체든 그냥 정적할당으로 쓰던지, 정적할당한 것을 포인터로 가리키던지, 아니면 동적할당으로 만들고 그 공간을 포인터로 가리키던지..
}